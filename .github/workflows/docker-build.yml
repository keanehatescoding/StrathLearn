name: Build, Test and Deploy Docker Images

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build runner image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile.runner
        tags: |
          ghcr.io/${{ github.repository_owner }}/code-challenge-runner:latest
        push: ${{ github.event_name != 'pull_request' }}
        load: ${{ github.event_name == 'pull_request' }}
        
    - name: Build server image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile.server
        tags: |
          ghcr.io/${{ github.repository_owner }}/strathlearn-server:latest
        push: ${{ github.event_name != 'pull_request' }}
        load: ${{ github.event_name == 'pull_request' }}
        
    - name: Test containers
      run: |
        docker images

  deploy:
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to Linode
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.LINODE_HOST }}
        username: ${{ secrets.LINODE_USER }}
        key: ${{ secrets.LINODE_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 20m
        script: |
          # Create necessary directories
          mkdir -p /opt/strathlearn/challenges /opt/strathlearn/executor-workdir
          chmod -R 755 /opt/strathlearn
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull the latest images
          docker pull ghcr.io/${{ github.repository_owner }}/code-challenge-runner:latest
          docker pull ghcr.io/${{ github.repository_owner }}/strathlearn-server:latest

          # Tag images with local names for docker-compose
          docker tag ghcr.io/${{ github.repository_owner }}/code-challenge-runner:latest code-challenge-runner:latest
          docker tag ghcr.io/${{ github.repository_owner }}/strathlearn-server:latest strathlearn-server:latest
          
          # Navigate to project directory
          cd /opt/strathlearn
          
          # Create docker-compose.yml file
          cat > docker-compose.yml << 'EOT'
          version: "3.8"
          
          services:
            server:
              image: strathlearn-server:latest
              restart: always
              ports:
                - "80:8080"
                - "9000:9000"
              volumes:
                - ./challenges:/app/challenges
                - ./executor-workdir:/app/executor-workdir
                - /var/run/docker.sock:/var/run/docker.sock
              environment:
                - PORT=8080
          EOT
          
          # Check if docker-compose is installed
          if ! command -v docker-compose &> /dev/null; then
            apt-get update
            apt-get install -y docker-compose
          fi
          
          # Stop and remove existing containers if they exist
          docker-compose down || true
          
          # Start the new containers
          docker-compose up -d
          
          # Check if containers are running
          docker ps
          
          # Clean up unused images
          docker image prune -f